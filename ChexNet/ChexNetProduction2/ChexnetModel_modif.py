from os import path
import numpy as np
import matplotlib.pyplot as plt

import cv2 as cv
import os

from AbstractProducts import load_mdl_chexnet
from ChexnetUtils import gradcam
from GenerateReport import GenerateReportClass 
from ChexnetConstantManager import ImgSize, MaxIntensityValue
from ChexnetConstantManager import ImagenetMean,ImagenetStd

#%%

class ChexnetModel():
   
    """This class is used to predict 14 different patologies in chest X-ray images"""

    def __init__(self,mdl):
        
        """ ChexNet pre-trained model """
        
        self.mdl=mdl
            
    def run_preprocessing(self,ImgIn):
        
        """ Input image normalized by ImageNet meand and std """
    
        ImgIn = cv.resize(ImgIn,ImgSize) # Image resize to (224,224)
        ImgIn = np.asarray(ImgIn/MaxIntensityValue) # Intensities normalization
        ImgMean = ImagenetMean # Mean values from Imagenet images
        ImgStd = ImagenetStd # Std values from Imagenet images
        
        # Imagenet standarization -> z = (x-mean)/std
        ImgOut = (ImgIn - ImgMean ) / ImgStd

        return ImgOut


    def run_prediction(self,ImgInput):
        
        """
        Input: X-Ray thorax image 
        Output: Prediction of thoracic pathologies (1D vector)
        """
        
        # Preprocessin image (Standarization)
        PreprocessedImg = self.run_preprocessing(ImgInput)
        
        # Expanding image dimensions to feed classification model
        PreprocessedImgExpand = np.expand_dims(PreprocessedImg,axis=0)
        
        # Model prediction
        Prediction = self.mdl.predict(PreprocessedImgExpand)
        
        PredictionProbabilities = np.squeeze(Prediction,axis=0) # Create a 1-D vector
        
        # Heatmap building using gradcam function
        ImgHeatmap = gradcam(self.mdl,ImgInput,PreprocessedImgExpand)

        return PredictionProbabilities

    def run_evaluation(self):
        pass

    def run_training(self):
        pass

#%%
"""
PRUEBA DEL MODELO

"""
from time import time
start_time = time() 


mdl=ChexnetModel(load_mdl_chexnet())

#%%

import pydicom as dicom
from PIL import Image
import cv2

image_path = 'C:/Users/Andres/Desktop/images/img4.dcm'
ds = dicom.dcmread(image_path)
img = ds.pixel_array

plt.imshow(img)
a,b=np.shape(img)

img=img/np.max(img)



img2 = np.zeros((a,b,3))

for i in range(3):
    img2[:,:,i]=img

img3=np.uint8(img2*255)

plt.imshow(img3)
img4= Image.fromarray(img3)
cv2.imwrite("C:/Users/Andres/Desktop/images/img4.png", img3)

#backtorgb = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB,[0,255])

# img2 = np.zeros((a,b,3))

# for i in range(3):
#     img2[:,:,i]=zz
    
# plt.imshow(img2)

# img3 = Image.fromarray(zz, 'RGB')

#%%

from time import time
start_time = time() 

imgdir = "C:/Users/Andres/Desktop/images/"

# numfile = 2
# listimgfile = os.listdir(imgdir)
imgfile = os.path.join(imgdir,'img4.png')

img = cv.imread(imgfile)

prediction = mdl.run_prediction(img)

elapsed_time = time() - start_time 
print(elapsed_time)

#%%
# Metadata
patient_name = "PATIENT_0025"
ID = '1234567'
genre = 'M'
date = '24/11/2021'
study_name = 'RADIOGRAFÍA DE TÓRAX (P.A. O A.P. Y LATERAL, DECÚBITO LATERAL, OBLICUAS O LATERAL) CON BARIO'
study_date = '01/01/01'
region = 'LATAM' # or US
report_text='This report was automatically generated by IMEX AI services. At least one pathology pattern was identified in this study. The heatmap overlead on the image represented the area with the AI considered to do the automatic evaluation.'
report = report_text

report=GenerateReportClass(patient_name, ID, genre,date,study_name,study_date,report,prediction,region)
report.generate_pdf()

print("el reporte ha sido generado con exito")

minutes=np.round(np.floor(elapsed_time/60),0)
seconds=np.round((elapsed_time/60-minutes)*60,0)
print(str(minutes)+' minutes '+ str(seconds) + ' seconds ')

#zz.generate_pdf()

#%%